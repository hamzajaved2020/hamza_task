<?php

namespace App\Repository;


use App\Dto\Price;
use App\Dto\Product;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Doctrine\Persistence\ManagerRegistry;
use Doctrine\Common\Collections\Expr\Comparison;
use Doctrine\Common\Collections\Criteria;

class ProductRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
//        parent::__construct($registry);
    }

    function getEntityManager(): EntityManagerInterface
    {
        return parent::getEntityManager(); // TODO: Change the autogenerated stub
    }

    public function findProducts(string $category, string $priceLessThen,int $limit): ArrayCollection
    {
        $products = json_decode(file_get_contents(realpath("")."/data.json"))->products;

        $products = new ArrayCollection($products);
        $criteria = new Criteria();

        if(!empty($category)){
            $expr = new Comparison('category', '=', $category);
            $criteria->where($expr);
        }
        if(!empty($priceLessThen)){
            $expr = new Comparison('price', '<=', $priceLessThen);
            $criteria->where($expr);
        }
        if(!empty($limit)){
            $criteria->setMaxResults($limit);
        }

        $products = $products->matching($criteria);

        $result = new ArrayCollection();

        foreach ($products as $product){
            $discount_percentage = null;
            $final_price = $product->price;
            if($product->sku == "000003"){
                $discount_percentage = 15;
                $final_price = $this->applyDiscount($product->price,$discount_percentage);
                $discount_percentage = "15%";
            }
            if($product->category == "boots"){
                $discount_percentage = 30;
                $final_price = $this->applyDiscount($product->price,$discount_percentage);
                $discount_percentage = "30%";
            }
            $price =  Price::of($product->price,$final_price,$discount_percentage,"EUR");
            $result->add( Product::of ($price,$product->sku, $product->name, $product->category));
        }
        return  $result;
    }

    public function applyDiscount($price,$percentage){
        $discount =  ($price/100) * $percentage;
        return $price - $discount;
    }

}